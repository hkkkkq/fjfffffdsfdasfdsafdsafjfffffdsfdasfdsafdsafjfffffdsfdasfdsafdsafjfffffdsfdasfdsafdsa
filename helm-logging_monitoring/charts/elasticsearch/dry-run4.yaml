[debug] Created tunnel using local port: '45942'

[debug] SERVER: "127.0.0.1:45942"

[debug] Original chart version: ""
[debug] CHART PATH: /home/bsscoe/song/helm/chart/elasticsearch

NAME:   elasticsearch
REVISION: 1
RELEASED: Thu Mar 21 12:38:36 2019
CHART: elasticsearch-1.21.2
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
appVersion: 6.6.1
client:
  antiAffinity: soft
  heapSize: 512m
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - chart-example.local
    path: /
    tls: []
  initResources: {}
  loadBalancerIP: {}
  loadBalancerSourceRanges: {}
  name: client
  nodeAffinity: {}
  nodeSelector: {}
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
  priorityClassName: ""
  replicas: 1
  resources:
    limits:
      cpu: "1"
    requests:
      cpu: 25m
      memory: 512Mi
  serviceType: ClusterIP
  tolerations: []
cluster:
  additionalJavaOpts: ""
  bootstrapShellCommand: ""
  config: {}
  env:
    MINIMUM_MASTER_NODES: "2"
  name: elasticsearch
  plugins: []
  xpackEnable: false
clustermode: false
data:
  antiAffinity: soft
  exposeHttp: false
  heapSize: 1536m
  hooks:
    drain:
      enabled: true
  initResources: {}
  name: data
  nodeAffinity: {}
  nodeSelector: {}
  persistence:
    accessMode: ReadWriteOnce
    enabled: false
    name: data
    size: 30Gi
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  priorityClassName: ""
  readinessProbe:
    httpGet:
      path: /_cluster/health?local=true
      port: 9200
    initialDelaySeconds: 5
  replicas: 2
  resources:
    limits:
      cpu: "1"
    requests:
      cpu: 25m
      memory: 1536Mi
  terminationGracePeriodSeconds: 3600
  tolerations: []
  updateStrategy:
    type: OnDelete
extraInitContainers: ""
image:
  pullPolicy: IfNotPresent
  repository: ktis-bastion01.container.ipc.kt.com:5000/elastic/elasticsearch-oss
  tag: 6.6.1
initImage:
  pullPolicy: Always
  repository: busybox
  tag: latest
master:
  antiAffinity: soft
  exposeHttp: false
  heapSize: 512m
  initResources: {}
  name: master
  nodeAffinity: {}
  nodeSelector: {}
  persistence:
    accessMode: ReadWriteOnce
    enabled: true
    name: data
    size: 4Gi
  podDisruptionBudget:
    enabled: false
    minAvailable: 2
  priorityClassName: ""
  readinessProbe:
    httpGet:
      path: /_cluster/health?local=true
      port: 9200
    initialDelaySeconds: 5
  replicas: 3
  resources:
    limits:
      cpu: "1"
    requests:
      cpu: 25m
      memory: 512Mi
  tolerations: []
  updateStrategy:
    type: OnDelete
podSecurityPolicy:
  annotations: {}
  enabled: false
serviceAccounts:
  client:
    create: true
    name: null
  data:
    create: false
    name: null
  master:
    create: false
    name: null
sysctlInitContainer:
  enabled: false

HOOKS:
MANIFEST:

---
# Source: elasticsearch/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch
  labels:
    app: elasticsearch
    chart: "elasticsearch-1.21.2"
    release: "elasticsearch"
    heritage: "Tiller"
data:
  elasticsearch.yml: |-
    cluster.name: elasticsearch

    #node.data: ${NODE_DATA:true}
    #node.master: ${NODE_MASTER:true}
    #node.ingest: ${NODE_INGEST:true}
    #node.name: ${HOSTNAME}

    network.host: 0.0.0.0
    # see https://github.com/kubernetes/kubernetes/issues/3595
    bootstrap.memory_lock: ${BOOTSTRAP_MEMORY_LOCK:false}

    #discovery:
    #  zen:
    #    ping.unicast.hosts: ${DISCOVERY_SERVICE:}
    #    minimum_master_nodes: ${MINIMUM_MASTER_NODES:2}

    # see https://github.com/elastic/elasticsearch-definitive-guide/pull/679
    processors: ${PROCESSORS:}

    # avoid split-brain w/ a minimum consensus of two masters plus a data node
    #gateway.expected_master_nodes: ${EXPECTED_MASTER_NODES:2}
    #gateway.expected_data_nodes: ${EXPECTED_DATA_NODES:1}
    #gateway.recover_after_time: ${RECOVER_AFTER_TIME:5m}
    #gateway.recover_after_master_nodes: ${RECOVER_AFTER_MASTER_NODES:2}
    #gateway.recover_after_data_nodes: ${RECOVER_AFTER_DATA_NODES:1}
  log4j2.properties: |-
    status = error
    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n
    rootLogger.level = info
    rootLogger.appenderRef.console.ref = console
    logger.searchguard.name = com.floragunn
    logger.searchguard.level = info
  pre-stop-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/var/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    echo "Prepare to migrate data of the node ${NODE_NAME}"
    echo "Move all data from node ${NODE_NAME}"
    curl -s -XPUT -H 'Content-Type: application/json' 'elasticsearch-client:9200/_cluster/settings' -d "{
      \"transient\" :{
          \"cluster.routing.allocation.exclude._name\" : \"${NODE_NAME}\"
      }
    }"
    echo ""

    while true ; do
      echo -e "Wait for node ${NODE_NAME} to become empty"
      SHARDS_ALLOCATION=$(curl -s -XGET 'http://elasticsearch-client:9200/_cat/shards')
      if ! echo "${SHARDS_ALLOCATION}" | grep -E "${NODE_NAME}"; then
        break
      fi
      sleep 1
    done
    echo "Node ${NODE_NAME} is ready to shutdown"
  post-start-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/var/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    CLUSTER_SETTINGS=$(curl -s -XGET "http://elasticsearch-client:9200/_cluster/settings")
    if echo "${CLUSTER_SETTINGS}" | grep -E "${NODE_NAME}"; then
      echo "Activate node ${NODE_NAME}"
      curl -s -XPUT -H 'Content-Type: application/json' "http://elasticsearch-client:9200/_cluster/settings" -d "{
        \"transient\" :{
            \"cluster.routing.allocation.exclude._name\" : null
        }
      }"
    fi
    echo "Node ${NODE_NAME} is ready to be used"
---
# Source: elasticsearch/templates/client-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: "client"
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-client
---
# Source: elasticsearch/templates/client-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: "client"
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-client

spec:
  ports:
    - name: http
      port: 9200
      targetPort: http
  selector:
    app: elasticsearch
    component: "client"
    release: elasticsearch
  type: ClusterIP
---
# Source: elasticsearch/templates/client-deployment.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: "client"
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-client
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: elasticsearch
        component: "client"
        release: elasticsearch
    spec:
      serviceAccountName: elasticsearch-client
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "elasticsearch"
                  release: "elasticsearch"
                  component: "client"
      containers:
      - name: elasticsearch
        env:
        - name: NODE_DATA
          value: "false"
        - name: NODE_MASTER
          value: "false"
        - name: DISCOVERY_SERVICE
          value: elasticsearch-discovery
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: "-Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m  "
        - name: MINIMUM_MASTER_NODES
          value: "2"
        resources:
            limits:
              cpu: "1"
            requests:
              cpu: 25m
              memory: 512Mi
        #readinessProbe:
        #  httpGet:
        #    path: /_cluster/health
        #    port: 9200
        #3  initialDelaySeconds: 5
        #livenessProbe:
        #  httpGet:
        #    path: /_cluster/health?local=true
        #    port: 9200
        #  initialDelaySeconds: 90
        image: "ktis-bastion01.container.ipc.kt.com:5000/elastic/elasticsearch-oss:6.6.1"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
      volumes:
      - name: config
        configMap:
          name: elasticsearch
