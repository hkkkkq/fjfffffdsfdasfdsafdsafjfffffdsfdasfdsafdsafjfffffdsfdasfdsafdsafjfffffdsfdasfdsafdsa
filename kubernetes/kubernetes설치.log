[계정 생성]
  chage -E -1 -I -1 -m 0 -M 99999 root

  groupadd flexgrp
  useradd -d /home/flex -s /bin/bash -m -g flexgrp flex
  passwd flex
  flex123!
  chage -E -1 -I -1 -m 0 -M 99999 flex




# Master Node

[Installing kubeadm, kebelet, kubectl]

  apt-get update && apt-get install -y apt-transport-https curl

  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

  apt-get update

  apt-get install -y kubelet kubeadm kubectl

  apt-mark hold kubelet kubeadm kubectl



[Initializing your control-plane node]

  kubeadm init

  kubeadm init --apiserver-cert-extra-sans 172.26.60.42

  =>

  our Kubernetes control-plane has initialized successfully!

  To start using your cluster, you need to run the following as a regular user:

    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config

  You should now deploy a pod network to the cluster.
  Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
    https://kubernetes.io/docs/concepts/cluster-administration/addons/

  Then you can join any number of worker nodes by running the following on each as root:

  kubeadm join 10.20.0.12:6443 --token xe3r7i.0q12vg6naafacmq4 \
      --discovery-token-ca-cert-hash sha256:4b009fb4a1eea2ea83d71ddc2e8eebcfd40c501ebd152d52084b9588fe354b29



[To make kubectl work for your non-root user]

  su -l flex

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

  [Alternatively, if you are the root user, you can run]

  export KUBECONFIG=/etc/kubernetes/admin.conf



[Installing a pod network add-on]

  kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml





# Workder Node

[Installing kubeadm, kebelet, kubectl]

  apt-get update && apt-get install -y apt-transport-https curl

  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

  apt-get update

  apt-get install -y kubelet kubeadm kubectl

  apt-mark hold kubelet kubeadm kubectl



[Joining your nodes]


  kubeadm join --token 18g20a.ct0lr51r8jzxbgkm \
    --discovery-token-unsafe-skip-ca-verification 172.26.60.42:6443 \
    -v 3

  error execution phase preflight: unable to fetch the kubeadm-config ConfigMap: failed to get config map: Get https://10.20.0.12:6443/api/v1/namespaces/kube-system/configmaps/kubeadm-config: dial tcp 10.20.0.12:6443: i/o timeout




[token은 24시간 후 만료된다. master node에서 재 확인 및 재 발행 가능하다.]

  kubeadm token list
  kubeadm token create

[discovery-token-ca-cert-hash의 경우  master node에서 재 확인 가능하다.]

  openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | \
   openssl dgst -sha256 -hex | sed 's/^.* //'









[kubernetes 초기화]

kubeadm reset
apt-get purge kubeadm kubectl kubelet kubernetes-cni kube*   
apt-get autoremove  
rm -rf ~/.kube
systemctl daemon-reload