https://opentutorials.org/course/228/4894

[요약]

대칭키 방식은 단점이 있다.
암호를 주고 받는 사람들 사이에 대칭키를 전달하는 것이 어렵다는 점이다.
대칭키가 유출되면 키를 획득한 공격자는 암호의 내용을 복호화 할 수 있기 때문에 암호가 무용지물이 되기 때문이다. 이런 배경에서 나온 암호화 방식이 공개키방식이다.

공개키 방식은 두개의 키를 갖게 되는데 A키로 암호화를 하면 B키로 복호화 할 수 있고, B키로 암호화하면 A키로 복호화 할 수 있는 방식이다.
이 방식에 착안해서 두개의 키 중 하나를 비공개키(private key, 개인키, 비밀키라고도 부른다)로하고, 나머지를 공개키(public key)로 지정한다.
비공개키는 자신만이 가지고 있고, 공개키를 타인에게 제공한다.
공개키를 제공 받은 타인은 공개키를 이용해서 정보를 암호화한다.
암호화한 정보를 비공개키를 가지고 있는 사람에게 전송한다.
비공개키의 소유자는 이 키를 이용해서 암호화된 정보를 복호화 한다.
이 과정에서 공개키가 유출된다고해도 비공개키를 모르면 정보를 복호화 할 수 없기 때문에 안전하다.
공개키로는 암호화는 할 수 있지만 복호화는 할 수 없기 때문이다.

이 방식은 이렇게 응용할 수도 있다.
비공개키의 소유자는 비공개키를 이용해서 정보를 암호화 한 후에 공개키와 함께 암호화된 정보를 전송한다.
정보와 공개키를 획득한 사람은 공개키를 이용해서 암호화된 정보를 복호화 한다.
이 과정에서 공개키가 유출된다면 의도하지 않은 공격자에 의해서 데이터가 복호화 될 위험이 있다.
이런 위험에도 불구하고 비공개키를 이용해서 암호화를 하는 이유는 무엇일까? 그것은 이것이 데이터를 보호하는 것이 목적이 아니기 때문이다.
암호화된 데이터를 공개키를 가지고 복호화 할 수 있다는 것은 그 데이터가 공개키와 쌍을 이루는 비공개키에 의해서 암호화 되었다는 것을 의미한다.
즉 공개키가 데이터를 제공한 사람의 신원을 보장해주게 되는 것이다.
이러한 것을 전자 서명이라고 부른다.

인증서의 역할은 클라이언트가 접속한 서버가 클라이언트가 의도한 서버가 맞는지를 보장하는 역할을 한다.
이 역할을 하는 민간기업들이 있는데 이런 기업들을 CA(Certificate authority) 혹은 Root Certificate 라고 부른다.
SSL을 통해서 암호화된 통신을 제공하려는 서비스는 CA를 통해서 인증서를 구입해야 한다.

SSL 인증서에는 다음과 같은 정보가 포함되어 있다.
1.서비스의 정보 (인증서를 발급한 CA, 서비스의 도메인 등등)
2.서버 측 공개키 (공개키의 내용, 공개키의 암호화 방법)
위와 같은 내용은 CA에 의해서 암호화 된다.
이 때 사용하는 암호화 기법이 공개키 방식이다.
CA는 자신의 CA 비공개키를 이용해서 서버가 제출한 인증서(공개키 포함)를 암호화하는 것이다.
CA의 비공개키는 절대로 유출되어서는 안된다. 이것이 노출되는 바람에 디지노타라는 회사는 파산된 사례도 있다.

인증서를 이해하는데 꼭 알고 있어야 하는 것이 CA의 리스트다.
브라우저는 내부적으로 CA의 리스트를 미리 파악하고 있다.
이 말은 브라우저의 소스코드 안에 CA의 리스트가 들어있다는 것이다.
브라우저가 미리 파악하고 있는 CA의 리스트에 포함되어야만 공인된 CA가 될 수 있는 것이다.
CA의 리스트와 함께 각 CA의 공개키를 브라우저는 이미 알고 있다.

결론부터 말하면 SSL은 암호화된 데이터를 전송하기 위해서 공개키와 대칭키를 혼합해서 사용한다.
즉 클라이언트와 서버가 주고 받는 실제 정보는 대칭키 방식으로 암호화하고,
대칭키 방식으로 암호화된 실제 정보를 복호화할 때사용할 대칭키는 공개키 방식으로 암호화해서 클라이언트와 서버가 주고 받는다.
-실제 데이터 : 대칭키
-대칭키의 키 : 공개키


컴퓨터와 컴퓨터가 네트워크를 이용해서 통신을 할 때는 내부적으로 3가지 단계가 있다. 아래와 같다.
악수(Handshake) -> 전송 -> 세션종료

SSL 방식을 이용해서 통신을 하는 브라우저와 서버 역시 핸드쉐이크를 하는데, 이 때 SSL 인증서를 주고 받는다.
1.클라이언트가 서버에 접속한다.
- 클라이언트 측에서 생성한 랜덤 데이터
- 클라이언트가 지원하는 암호화 방식들
- 세션 아이디
2. 서버는 Client에 응답한다
- 서버 측에서 생성한 랜덤 데이터
- 서버가 선택한 클라이언트의 암호화 방식 
- 인증서
3. 클라이언트는 서버의 인증서가 CA에 의해서 발급된 것인지를 확인하기 위해서 클라이언트에 내장된 CA 리스트를 확인한다.
CA 리스트에 인증서가 없다면 사용자에게 경고 메시지를 출력한다.
인증서가 CA에 의해서 발급된 것인지를 확인하기 위해서 클라이언트에 내장된 CA의 공개키를 이용해서 인증서를 복호화한다.
복호화에 성공했다면 인증서는 CA의 개인키로 암호화된 문서임이 암시적으로 보증된 것이다.
인증서를 전송한 서버를 믿을 수 있게 된 것이다. => 이를 피하는 방법으로 해당 서버의 인증서가 정상적인 것이라고  설정하는 방법이 있는데 trustStore에 서버의 인증서를 등록하여 믿을 수 있는 서버라고 등록하는 것이다.

클라이언트는 상기 2번을 통해서 받은 서버의 랜덤 데이터와 클라이언트가 생성한 랜덤 데이터를 조합해서 pre master secret라는 키를 생성한다.
이 키는 뒤에서 살펴볼 세션 단계에서 데이터를 주고 받을 때 암호화하기 위해서 사용될 것이다.
이 때 사용할 암호화 기법은 대칭키이기 때문에 pre master secret 값은 제 3자에게 절대로 노출되어서는 안된다.
그럼 문제는 이 pre master secret 값을 어떻게 서버에게 전달할 것인가이다.
이 때 사용하는 방법이 바로 공개키 방식이다.
서버의 공개키로 pre master secret 값을 암호화해서 서버로 전송하면 서버는 자신의 비공개키로 안전하게 복호화 할 수 있다.
그럼 서버의 공개키는 어떻게 구할 수 있을까? 서버로부터 받은 인증서 안에 들어있다.
이 서버의 공개키를 이용해서 pre master secret 값을 암호화한 후에 서버로 전송하면 안전하게 전송할 수 있다.