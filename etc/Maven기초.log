<Maven 기초>

phase는 말 그대로 단계를 뜻하는데, 메이븐에서는 프로젝트 라이프사이클의 각 단계를 미리 정해놓았다.
기본적인 phase들을 순서대로 나열해보면 아래와 같다.(각 phase 사이에 세세한 단계들이 존재하기도 하지만 자주쓰는 단계들만을 정리했다.)

[Clean Lifecycle]
clean : 이전 빌드에서 생성된 파일들을 삭제하는 단계. 보통 빌드 단계를 실행하기 전 사용.

[Build Lifecycle]
process-resources : 컴파일전 필요한 리소스들을 target 디렉토리에 복사하고 필요한 처리 작업을 진행하는 단계
compile : 프로젝트의 소스 코드를 컴파일하는 단계
process-test-resources : 테스트 코드 컴파일에 필요한 리소스들을 target 디렉토리에 복사하고 필요한 처리 작업을 진행하는 단계
test-compile : 프로젝트의 테스트 코드를 컴파일하는 단계
test : 테스트를 실행하는 단계
package : 컴파일된 소스 코드와 리소스들을 배포를 위한 패키지(ex. JAR, WAR)로 만드는 단계
install : 패키지를 로컬 저장소에 설치하는 단계
deploy : 만들어진 패키지를 외부 저장소에 release 하는 단계

[Site Lifecycle]
site : 프로젝트 문서를 생성하는 단계

위에서 phase를 "순서대로" 나열했다고 했던 이유는 각 Build Lifecycle에서 phase를 실행시 이전 phase부터 순차적으로 실행이 되기 때문이다.
예를 들면 test phase를 실행시에는 process-resources => compile => process-test-resources => test 순으로 실행이 된다.

각 phase가 실행된다는 것은 곧, 해당 phase에서 실행되도록 설정된 goal들을 실행한다는 뜻이다.
보통 goal 들은 compiler:compile 형식으로 나타낸다. 콜론 앞의 compiler는 plugin을 나타내고, 콜론 뒤의 compile은 goal 명을 나타낸다.
즉, 플러그인명:골명 으로 나타낸다고 할 수 있다.
goal을 이렇게 나타내는 이유는 메이븐의 구현 아키텍처와도 관련이 있는데, 메이븐 자체는 아주 기본적인 기능만을 가지고 있고 대부분의 기능들은 plugin을 통해서 제공하도록 되어있기 때문이다.
plugin들은 몇 가지 goal 기능들을 제공해주고, 프로젝트 마다의 필요에 따라서 유연하고 설정해 사용하도록 되어있다. 각 빌드 phase에서 실행하는 기본적인 goal들을 매치해보면 아래와 같다.

process-resources            => resources:resource
compile                         => compiler:compile
process-test-resources      => resources:testResources
test-compile                   => compiler:testCompile
test                              => surefire:test
package                        => jar:jar
install                           => install:install
deploy                          => deploy:deploy

위에 매치된 goal 들은 절대적인 것은 아니며, pom.xml 설정을 통해 각 프로젝트에 맞게 설정이 가능하다.
단순히 축약하자면, 각 phase는 실행할 goal을 가지고 있고, goal은 plugin에서 제공해주는 것이며, 어떤 plugin을 어떻게 사용할지, 어떤 phase에 어떤 goal을 사용할지는 pom.xml 에서 설정한다.
