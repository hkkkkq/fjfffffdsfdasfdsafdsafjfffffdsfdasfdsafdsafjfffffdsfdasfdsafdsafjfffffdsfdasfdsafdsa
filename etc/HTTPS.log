1. HTTP의 약점

 1) 평문(암호화 하지 않은) 통신이기 때문에 도청 가능
  - TCP/IP는 도청 가능한 네트워크
 2) 통신 상대를 확인하지 않기 때문에 위장 가능
 3) 완전성을 증명할 수 없기 때문에 변조 가능
  - A가 보낸 데이터와 내가 A로부터 받은 데이터가 같은 것인지 알 수 없음
 
2. HTTPS: HTTP + 암호화 + 인증 + 완전성 보호
 - HTTP는 TCP(over IP)와 통신하지만 HTTPS는 SSL과 통신하고 SSL이 TCP(over IP)와 통신한다.
 
  1) SSL 인증서: 위 HTTP 약점을 보완
  2) SSL 인증서 역할
   a) 클라이언트가 접속한 서버가 신뢰할 수 있는 서버임을 보장 => 전자서명, 완전성 보장
   b) SSL 통신에 사용할 공개키를 클라이언트에 제공 => 암호화, 완전성 보장
  3) SSL 인증서 내용
   - 서비스 정보 (인증서 발급 CA[Certificate Authority), 서비스 도메인)
   - 서버 측 공개키 (공개키 내용, 공개키 암호화 방식)
  4) SSL 동작 방법
   a) 악수 (Handshake): 인증서 내 공개키로 대칭키를 암호화하여 전송하고 복호화, SSL 통신 준비 단계
   b) 세션: 실제로 서버와 클라이언트가 데이터를 대칭키 방식으로 주고 받는 단계이다.
   c) 세션 종료
 
 - HTTPS에서 사용하는 암호화 방식: 대칭키 방식 + 공개키 방식
 - HTTPS의 약점: 처리 속도
  1) SSL을 사용하면 CPU나 메모리 등의 리소스 다량 소비
  2) HTTP 대비 2 ~ 100배 느림
  
  
 package foo; 

import java.net.URL;
import java.io.*;
import javax.net.ssl.HttpsURLConnection;

public class JavaHttpsExample
{
  public static void main(String[] args)
  throws Exception
  {
    String httpsURL = "https://your.https.url.here/";
    URL myurl = new URL(httpsURL);
    HttpsURLConnection con = (HttpsURLConnection)myurl.openConnection();
    InputStream ins = con.getInputStream();
    InputStreamReader isr = new InputStreamReader(ins);
    BufferedReader in = new BufferedReader(isr);

    String inputLine;

    while ((inputLine = in.readLine()) != null)
    {
      System.out.println(inputLine);
    }

    in.close();
  }
}
