2PC, Two-Phase Commit의 약자로, 각각의 독립적인 일들을 완료하는 과정을 <준비>, <결과 반영> 두 단계로 나누고 모든 독립적인 일들의 준비가 끝났을 때만 실제 결과를 반영하는 것이다.
이체 트랜잭션의 경우에는 결과 반영이란 각각 '계좌에서 돈을 꺼낸다'와 '계좌에 돈을 넣는다'이다. 그리고 <준비>라는 개념은 일 자체를 시작하기 전의 준비가 아니다.
일을 다 끝내놓고 그 결과를 반영하기 전의 준비를 의미한다.
여기서 한 가지 주의할 점은 2PC는 번거로움을 없애기 만들기 위해서 만든 알고리즘은 아니다.
전산 시스템에서는 한번 <결과 반영>을 하고 나면 그것을 되돌리기 굉장히 어렵기 때문에 어느 일이라도 먼저 <결과 반영>이 되면 안 된다. 그래서 2PC가 필요한 것이다.

트랜잭션이란 개념도, 2PC라는 개념도 미국에서 나온 것이기 때문에 각각에 맞는 영어 용어가 있다. <준비>는 prepare이고 <결과 반영>은 커밋(commit) 이다.
그리고 독립적인 일을 시작하는 것은 begin(<시작>)이고 준비 이전까지 일을 끝내는 것은 end(<끝>) 라고 한다. 이를 요약하면
prepare[begin -> end] -> commit
만약 어느 일 하나라도 <준비>가 실패하면 모든 일들이 <시작(begin)> 이전 단계로 돌아가야만 한다. 이 돌아간다는 용어가 바로 <롤백>(rollback)이다.
롤백이 되는 경우는 <준비> 뿐만 아니라 <시작>이나 <끝>이 실패해도 마찬가지다.
그러나 모든 일이 <준비>까지 성공했다면 그것은 커밋을 성공하는 걸 보장하겠다는 의미이기 때문에 트랜잭션에 속한 어느 일 하나가 일시적으로 커밋이 실패했더라도 계속 커밋을 시도하는게 일반적이다.

[Prepare Phase]

In this phase, the database does not actually commit or roll back the transaction. By preparing, a node:
  1) The node allocates the resources it needs to commit the transaction if data is changed.
  2) Records information in the redo logs so that it can subsequently either commit or roll back the transaction, regardless of intervening failures
  3) Places a distributed lock on modified tables, which prevents reads

This phase enforces the primary rule of a distributed transaction: all nodes involved in the transaction either all commit or all roll back the transaction at the same logical time.
This phase makes the commit phase completes faster.
The prepared nodes then wait until a COMMIT or ROLLBACK request is received from the global coordinator.

[Commit Phase]

Before this phase occurs, all nodes other than the commit point site referenced in the distributed transaction have guaranteed that they are prepared,
that is, they have the necessary resources to commit the transaction.
  1) The global and local coordinators send a message to all nodes instructing them to commit the transaction
  2) At each node, the database commits the local portion of the distributed transaction and releases locks.
  3) At each node, the database records an additional redo entry in the local redo log, indicating that the transaction has committed.

※ 참고=> https://docs.oracle.com/cd/B28359_01/server.111/b28310/ds_txns003.htm#ADMIN12229

